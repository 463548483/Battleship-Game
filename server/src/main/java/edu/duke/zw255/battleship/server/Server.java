/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.zw255.battleship.server;

import edu.duke.zw255.battleship.shared.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.net.ServerSocket;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class Server {
  public static ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(4, 10, 60L, TimeUnit.SECONDS,
      new LinkedBlockingQueue<>());
  // key: room name, value: RoomHandler
  public static Map<String, RoomHandler> roomMap=new ConcurrentHashMap<>();
  public static int roomContainer=2;
  public static RoomHandler curroomHandler;
  public static Messenger toClientMessenger;
  public static ServerSocket serverSocket;


  public static void main(String[] args) throws IOException, ClassNotFoundException {
    serverSocket= new ServerSocket(12345);
    System.out.println("server awaiting connections...");
    while (true){
      toClientMessenger = new Messenger(serverSocket);
      //System.out.println(toClientMessenger);
      String initType = (String) toClientMessenger.recv();
      String roomName = (String) toClientMessenger.recv();
      if (initType.equals("init")){        
        curroomHandler=new RoomHandler(roomName, serverSocket);
        roomMap.put(roomName,curroomHandler);
        System.out.println("init");
      }
      
      else{
        System.out.println("if legal join");
        if (roomMap.containsKey(roomName)==false){
          System.out.println("illegal");
          toClientMessenger.send(Flag.errorFlag);
          continue;
        }
        toClientMessenger.send(Flag.correctFlag);
        curroomHandler=roomMap.get(roomName);
        System.out.println("join");
      }
      curroomHandler.acceptOnePlayer(toClientMessenger);
      if (curroomHandler.playerNum==roomContainer){
        roomMap.remove(roomName);
        threadPoolExecutor.execute(curroomHandler);
      }
    }
  }
}
